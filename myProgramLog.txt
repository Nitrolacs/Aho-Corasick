 2022-11-21 21:06:38,864 - DEBUG - 'search_substring_in_string' ('ababbaaba', ['aba', 'bba'], None, 'first', 4) '0.0004' sec
 2022-11-21 22:52:00,063 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), False, 'first', 4) '0.0000' sec
 2022-11-22 12:24:36,671 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0000' sec
 2022-11-22 12:30:24,429 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0001' sec
 2022-11-22 12:31:52,265 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0001' sec
 2022-11-22 12:35:56,502 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 2) '0.0000' sec
 2022-11-22 12:36:28,533 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:38:58,961 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:39:33,203 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:40:06,868 - DEBUG - 'search' ('ababbababa', 'aba', False, 'last', 4) '0.0000' sec
 2022-11-22 12:40:17,178 - DEBUG - 'search' ('ababbababa', 'aba', False, 'first', 4) '0.0000' sec
 2022-11-22 12:46:57,126 - DEBUG - 'search' ('', 'abc', True, 'last', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', True, 'first', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', False, 'last', 1) '0.0000' sec
 2022-11-22 12:48:34,029 - DEBUG - 'search' ('', 'abc', True, 'last', 1) '0.0000' sec
 2022-11-22 12:59:32,412 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:02:00,599 - DEBUG - 'search' ('a', ('abc', 'dfe'), False, 'first', 1) '0.0000' sec
 2022-11-22 13:02:22,314 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:14,241 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:25,339 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:41,798 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:44:57,449 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:45:18,332 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:46:07,633 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:47:22,580 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:47:48,819 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:49:18,284 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:54:56,320 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:56:07,193 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:58:25,760 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:59:33,097 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 14:00:08,166 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 14:17:32,970 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), True, 'first', 2) '0.0001' sec
 2022-11-22 14:17:43,747 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), True, 'first', 2) '0.0001' sec
 2022-11-22 14:56:15,178 - DEBUG - 'search' (',,,,,', 's', None, 'first', 4) '0.0000' sec
 2022-11-22 14:56:30,171 - DEBUG - 'search' ('aaaaaaaaaaaa', 'a', None, 'first', 4) '0.0000' sec
 2022-11-22 14:56:50,989 - DEBUG - 'search' ('aaaaaaaaaaaa', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:56:56,046 - DEBUG - 'search' ('aaaaaaaaaaaa', 'aaaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:03,783 - DEBUG - 'search' ('aaaaaabaaaaa', 'aaaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:09,019 - DEBUG - 'search' ('aaaaaabaaaaa', 'abaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:22,722 - DEBUG - 'search' ('aa aaaabaaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:33,973 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:48,600 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:03,805 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:20,075 - DEBUG - 'search' ('a', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:36,705 - DEBUG - 'search' ('a', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:59:30,839 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:59:52,147 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 100000) '0.0034' sec
 2022-11-22 15:00:12,505 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0023' sec
 2022-11-22 15:00:39,687 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0026' sec
 2022-11-22 15:00:42,398 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0022' sec
 2022-11-22 15:00:55,799 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'last', 1) '0.0026' sec
 2022-11-22 15:01:09,020 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\ndef', None, 'last', 1) '0.0025' sec
 2022-11-22 15:01:15,169 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\\\ndef', None, 'last', 1) '0.0023' sec
 2022-11-22 15:01:49,743 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'basicConfig', None, 'last', 1) '0.0023' sec
 2022-11-27 21:26:37,371 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'basicConfig', None, 'last', 1) '0.0024' sec
 2022-11-27 21:34:57,144 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-27 21:38:55,564 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-27 21:39:06,432 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'last', 100000) '0.0000' sec
 2022-11-27 21:42:39,476 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 14) '0.0000' sec
 2022-11-27 21:43:00,193 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0004' sec
 2022-11-27 21:43:21,412 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 10) '0.0003' sec
 2022-11-27 21:45:48,578 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0004' sec
 2022-11-27 21:45:54,100 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0003' sec
 2022-11-27 21:59:03,878 - DEBUG - 'search' ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aa', False, 'first', 100000) '0.0015' sec
 2022-11-27 22:00:14,095 - DEBUG - 'search' ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabababababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aa', 'ab'), True, 'first', 1000000) '0.0029' sec
 2022-11-27 22:03:57,458 - DEBUG - 'search' ('ababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('ab', 'aa'), True, 'first', 100000) '0.0009' sec
 2022-11-27 22:11:54,374 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:12:48,979 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:18:07,344 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:18:17,038 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:28:53,472 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:29:48,450 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:30:21,457 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:32:55,887 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:33:24,027 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:34:45,579 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:35:10,719 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:11:53,646 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:12:41,939 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:12:50,111 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:49:06,744 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:50:58,112 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:51:24,608 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 23:51:57,663 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:32,803 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:37,554 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:43,472 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 23:53:55,461 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:53:58,912 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
