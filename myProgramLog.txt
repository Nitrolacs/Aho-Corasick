 2022-11-21 21:06:38,864 - DEBUG - 'search_substring_in_string' ('ababbaaba', ['aba', 'bba'], None, 'first', 4) '0.0004' sec
 2022-11-21 22:52:00,063 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), False, 'first', 4) '0.0000' sec
 2022-11-22 12:24:36,671 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0000' sec
 2022-11-22 12:30:24,429 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0001' sec
 2022-11-22 12:31:52,265 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 2) '0.0001' sec
 2022-11-22 12:35:56,502 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 2) '0.0000' sec
 2022-11-22 12:36:28,533 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:38:58,961 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:39:33,203 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'last', 4) '0.0001' sec
 2022-11-22 12:40:06,868 - DEBUG - 'search' ('ababbababa', 'aba', False, 'last', 4) '0.0000' sec
 2022-11-22 12:40:17,178 - DEBUG - 'search' ('ababbababa', 'aba', False, 'first', 4) '0.0000' sec
 2022-11-22 12:46:57,126 - DEBUG - 'search' ('', 'abc', True, 'last', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', True, 'first', 1) '0.0000' sec
 2022-11-22 12:48:34,028 - DEBUG - 'search' ('', 'abc', False, 'last', 1) '0.0000' sec
 2022-11-22 12:48:34,029 - DEBUG - 'search' ('', 'abc', True, 'last', 1) '0.0000' sec
 2022-11-22 12:59:32,412 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:02:00,599 - DEBUG - 'search' ('a', ('abc', 'dfe'), False, 'first', 1) '0.0000' sec
 2022-11-22 13:02:22,314 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:14,241 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:25,339 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:03:41,798 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:44:57,449 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:45:18,332 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:46:07,633 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:47:22,580 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:47:48,819 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:49:18,284 - DEBUG - 'search' ('a', 'abc', False, 'first', 1) '0.0000' sec
 2022-11-22 13:54:56,320 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:56:07,193 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:58:25,760 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 13:59:33,097 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 14:00:08,166 - DEBUG - 'search' ('ababbababa', ('aba', 'bba'), False, 'first', 3) '0.0000' sec
 2022-11-22 14:17:32,970 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), True, 'first', 2) '0.0001' sec
 2022-11-22 14:17:43,747 - DEBUG - 'search' ('ababbaaba', ('aba', 'bba'), True, 'first', 2) '0.0001' sec
 2022-11-22 14:56:15,178 - DEBUG - 'search' (',,,,,', 's', None, 'first', 4) '0.0000' sec
 2022-11-22 14:56:30,171 - DEBUG - 'search' ('aaaaaaaaaaaa', 'a', None, 'first', 4) '0.0000' sec
 2022-11-22 14:56:50,989 - DEBUG - 'search' ('aaaaaaaaaaaa', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:56:56,046 - DEBUG - 'search' ('aaaaaaaaaaaa', 'aaaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:03,783 - DEBUG - 'search' ('aaaaaabaaaaa', 'aaaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:09,019 - DEBUG - 'search' ('aaaaaabaaaaa', 'abaaa', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:22,722 - DEBUG - 'search' ('aa aaaabaaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:33,973 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-22 14:57:48,600 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:03,805 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:20,075 - DEBUG - 'search' ('a', 'B', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:58:36,705 - DEBUG - 'search' ('a', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:59:30,839 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 100000) '0.0000' sec
 2022-11-22 14:59:52,147 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 100000) '0.0034' sec
 2022-11-22 15:00:12,505 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0023' sec
 2022-11-22 15:00:39,687 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0026' sec
 2022-11-22 15:00:42,398 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'first', 1) '0.0022' sec
 2022-11-22 15:00:55,799 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'def', None, 'last', 1) '0.0026' sec
 2022-11-22 15:01:09,020 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\ndef', None, 'last', 1) '0.0025' sec
 2022-11-22 15:01:15,169 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\\\ndef', None, 'last', 1) '0.0023' sec
 2022-11-22 15:01:49,743 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'basicConfig', None, 'last', 1) '0.0023' sec
 2022-11-27 21:26:37,371 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'basicConfig', None, 'last', 1) '0.0024' sec
 2022-11-27 21:34:57,144 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-27 21:38:55,564 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 100000) '0.0000' sec
 2022-11-27 21:39:06,432 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'last', 100000) '0.0000' sec
 2022-11-27 21:42:39,476 - DEBUG - 'search' ('aa aaaababaaaa', ('aba', 'aa'), None, 'first', 14) '0.0000' sec
 2022-11-27 21:43:00,193 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0004' sec
 2022-11-27 21:43:21,412 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 10) '0.0003' sec
 2022-11-27 21:45:48,578 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0004' sec
 2022-11-27 21:45:54,100 - DEBUG - 'search' ('aa aaaababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aba', 'aa'), None, 'first', 280) '0.0003' sec
 2022-11-27 21:59:03,878 - DEBUG - 'search' ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aa', False, 'first', 100000) '0.0015' sec
 2022-11-27 22:00:14,095 - DEBUG - 'search' ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabababababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('aa', 'ab'), True, 'first', 1000000) '0.0029' sec
 2022-11-27 22:03:57,458 - DEBUG - 'search' ('ababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ('ab', 'aa'), True, 'first', 100000) '0.0009' sec
 2022-11-27 22:11:54,374 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:12:48,979 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:18:07,344 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:18:17,038 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:28:53,472 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:29:48,450 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:30:21,457 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:32:55,887 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:33:24,027 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 22:34:45,579 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 22:35:10,719 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:11:53,646 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:12:41,939 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:12:50,111 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:49:06,744 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:50:58,112 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:51:24,608 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 23:51:57,663 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:32,803 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:37,554 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:52:43,472 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 23:53:55,461 - DEBUG - 'search' ('ababbaaba', 'a', None, 'first', 9) '0.0000' sec
 2022-11-27 23:53:58,912 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-27 23:56:33,013 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-27 23:59:00,938 - DEBUG - 'search' (',,,,,', 's', False, 'first', 10000) '0.0000' sec
 2022-11-27 23:59:17,763 - DEBUG - 'search' (',,,,,', ',', False, 'first', 10000) '0.0000' sec
 2022-11-28 18:06:47,276 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-28 18:07:53,063 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0027' sec
 2022-11-28 18:08:30,009 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0023' sec
 2022-11-28 18:09:05,209 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-28 18:11:15,905 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-28 18:11:31,914 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-28 18:11:52,494 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0025' sec
 2022-11-28 18:13:12,440 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', 'a', None, 'first', 6057) '0.0024' sec
 2022-11-28 18:23:53,085 - DEBUG - 'search' (',,,,,', 's', None, 'first', 5) '0.0000' sec
 2022-11-28 18:23:58,502 - DEBUG - 'search' (',,,,,', ',', None, 'first', 5) '0.0000' sec
 2022-11-28 18:29:17,325 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 14) '0.0000' sec
 2022-11-28 18:29:23,192 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 14) '0.0000' sec
 2022-11-28 18:29:33,673 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 14) '0.0000' sec
 2022-11-28 18:29:36,915 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 14) '0.0000' sec
 2022-11-28 18:31:10,294 - DEBUG - 'search' ('aa aaaababaaaa', 'B', None, 'first', 14) '0.0000' sec
 2022-11-28 18:31:43,869 - DEBUG - 'search' ('aa aaaababaaaa', 'B', False, 'first', 14) '0.0000' sec
 2022-11-28 18:31:48,912 - DEBUG - 'search' ('aa aaaababaaaa', 'B', True, 'first', 14) '0.0000' sec
 2022-11-28 18:32:44,989 - DEBUG - 'search' ('a', 'B', True, 'first', 100000) '0.0000' sec
 2022-11-28 18:40:22,038 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\ndef', False, 'last', 1) '0.0023' sec
 2022-11-28 18:42:41,546 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\\\ndef', False, 'last', 1) '0.0023' sec
 2022-11-28 18:43:00,877 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\n', False, 'last', 1) '0.0023' sec
 2022-11-28 18:43:08,215 - DEBUG - 'search' ('from collections import dequeimport timeimport loggingfrom typing import Unionlogging.basicConfig(    level=logging.DEBUG,    filename=\'myProgramLog.txt\',    format=\' %(asctime)s - %(levelname)s - %(message)s\')def timeit(method):    """Логирует время работы функции"""    def timed(*args):        ts = time.perf_counter()        result = method(*args)        te = time.perf_counter()        running_time = f"{te - ts:0.4f}"        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))        return result    return timedclass AhoCorasickTree(object):    def __init__(self, keywords: tuple) -> None:        """        Алгоритм Ахо-Корасика        :param keywords: дерево бора.        """        # Инициализируем корневой узел        self.AhoCorasickList = list()        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})        self.add_keywords(keywords)  # Добавляем все подстроки        self.set_suf_link()  # переходы    def add_keywords(self, keywords: tuple) -> None:        """ Добавляем все подстроки в список подстрок """        for keyword in keywords:            self.add_keyword(keyword)    def find_next_state(self, current_state, value) -> Union["node", None]:        """Находим следующее состояние"""        for node in self.AhoCorasickList[current_state]["next_states"]:            if self.AhoCorasickList[node]["value"] == value:                return node        return None    def add_keyword(self, keyword: str) -> None:        """Добавляем подстроки в дерево и помечаем терминальные точки"""        current_state = 0        index = 0        child = self.find_next_state(current_state, keyword[index])        while child is not None:            current_state = child            index = index + 1            if index < len(keyword):                child = self.find_next_state(current_state, keyword[index])            else:                break        for i in range(index, len(keyword)):            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}            self.AhoCorasickList.append(node)            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)            current_state = len(self.AhoCorasickList) - 1        self.AhoCorasickList[current_state]["output"].append(keyword)    def set_suf_link(self) -> None:        """Устанавливаем суффиксные ссылки"""        new_deque = deque()        for node in self.AhoCorasickList[0]["next_states"]:            new_deque.append(node)            self.AhoCorasickList[node]["suff_link"] = 0        while new_deque:            tmp = new_deque.popleft()            for child in self.AhoCorasickList[tmp]["next_states"]:                new_deque.append(child)                state = self.AhoCorasickList[tmp]["suff_link"]                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:                    state = self.AhoCorasickList[state]["suff_link"]                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,                                                                                self.AhoCorasickList[child]["value"])                if self.AhoCorasickList[child]["suff_link"] is None:                    self.AhoCorasickList[child]["suff_link"] = 0                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][                                                            "output"]    def get_keywords_found(self, line):        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""        current_state = 0        keywords_found = []        for i in range(len(line)):            while self.find_next_state(current_state, line[i]) is None and current_state != 0:                current_state = self.AhoCorasickList[current_state]["suff_link"]            current_state = self.find_next_state(current_state, line[i])            if current_state is None:                current_state = 0            else:                for k in self.AhoCorasickList[current_state]["output"]:                    keywords_found.append((i - len(k) + 1, k))        return keywords_found@timeitdef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):    """Шаблон функции поиска"""    if not case_sensitivity:        string = string.lower()        if isinstance(sub_string, tuple):            sub_string = tuple([word.lower() for word in sub_string])        else:            sub_string = sub_string.lower()    if isinstance(sub_string, str):        sub_string_new = tuple([sub_string])        trie = AhoCorasickTree(sub_string_new)    else:        trie = AhoCorasickTree(sub_string)    result = trie.get_keywords_found(string)    if isinstance(sub_string, tuple):        counter = 0        if method == "last":            result = result[::-1]        information = dict()        for word in sub_string:            information[word] = []        for pair in result:            counter += 1            if counter <= count:                information[pair[1]].append(pair[0])        for key, item in information.items():            if item:                information[key] = tuple(item)            else:                information[key] = None    else:        information = []        for item in result:            information.append(item[0])        if method == "last":            information = list(information[::-1])[:count]        elif method == "first":            information = list(information[:count])        if information:            information = tuple(information)    if len(information) == 0:        information = None    elif isinstance(information, dict):        is_value = False        for _, value in information.items():            if value is not None:                is_value = True        if not is_value:            information = None    return information', '\\n', False, 'first', 6057) '0.0023' sec
 2022-11-28 18:44:02,346 - DEBUG - 'search' ('import timedef main():    print("Hello,world!")', '\\n', False, 'first', 47) '0.0000' sec
 2022-11-28 18:44:58,462 - DEBUG - 'search' ('import timedef main():    print("Hello,world!")', '\\n', False, 'first', 47) '0.0000' sec
 2022-11-28 18:45:20,206 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:45:29,855 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:45:32,601 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\ndef', False, 'first', 49) '0.0000' sec
 2022-11-28 18:45:46,598 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\ndef', False, 'first', 49) '0.0000' sec
 2022-11-28 18:45:49,648 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:46:00,600 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:47:08,413 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0001' sec
 2022-11-28 18:47:20,515 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:47:47,563 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0001' sec
 2022-11-28 18:48:12,418 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\n', False, 'first', 49) '0.0000' sec
 2022-11-28 18:48:43,992 - DEBUG - 'search' ('ababbaaba', 'a', False, 'first', 9) '0.0000' sec
 2022-11-28 18:48:56,318 - DEBUG - 'search' ('from collections import deque\n\nimport time\n\nimport logging\nfrom typing import Union\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    filename=\'myProgramLog.txt\',\n    format=\' %(asctime)s - %(levelname)s - %(message)s\')\n\n\ndef timeit(method):\n    """Логирует время работы функции"""\n\n    def timed(*args):\n        ts = time.perf_counter()\n        result = method(*args)\n        te = time.perf_counter()\n        running_time = f"{te - ts:0.4f}"\n\n        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))\n        return result\n\n    return timed\n\n\nclass AhoCorasickTree(object):\n\n    def __init__(self, keywords: tuple) -> None:\n        """\n        Алгоритм Ахо-Корасика\n        :param keywords: дерево бора.\n        """\n\n        # Инициализируем корневой узел\n        self.AhoCorasickList = list()\n        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})\n\n        self.add_keywords(keywords)  # Добавляем все подстроки\n        self.set_suf_link()  # переходы\n\n    def add_keywords(self, keywords: tuple) -> None:\n        """ Добавляем все подстроки в список подстрок """\n        for keyword in keywords:\n            self.add_keyword(keyword)\n\n    def find_next_state(self, current_state, value) -> Union["node", None]:\n        """Находим следующее состояние"""\n        for node in self.AhoCorasickList[current_state]["next_states"]:\n            if self.AhoCorasickList[node]["value"] == value:\n                return node\n        return None\n\n    def add_keyword(self, keyword: str) -> None:\n        """Добавляем подстроки в дерево и помечаем терминальные точки"""\n        current_state = 0\n        index = 0\n        child = self.find_next_state(current_state, keyword[index])\n        while child is not None:\n            current_state = child\n            index = index + 1\n            if index < len(keyword):\n                child = self.find_next_state(current_state, keyword[index])\n            else:\n                break\n\n        for i in range(index, len(keyword)):\n            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}\n            self.AhoCorasickList.append(node)\n            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)\n            current_state = len(self.AhoCorasickList) - 1\n\n        self.AhoCorasickList[current_state]["output"].append(keyword)\n\n    def set_suf_link(self) -> None:\n        """Устанавливаем суффиксные ссылки"""\n        new_deque = deque()\n\n        for node in self.AhoCorasickList[0]["next_states"]:\n            new_deque.append(node)\n            self.AhoCorasickList[node]["suff_link"] = 0\n\n        while new_deque:\n            tmp = new_deque.popleft()\n\n            for child in self.AhoCorasickList[tmp]["next_states"]:\n                new_deque.append(child)\n                state = self.AhoCorasickList[tmp]["suff_link"]\n\n                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:\n                    state = self.AhoCorasickList[state]["suff_link"]\n\n                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,\n                                                                                self.AhoCorasickList[child]["value"])\n\n                if self.AhoCorasickList[child]["suff_link"] is None:\n                    self.AhoCorasickList[child]["suff_link"] = 0\n\n                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\\n                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][\n                                                            "output"]\n\n    def get_keywords_found(self, line):\n        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""\n\n        current_state = 0\n        keywords_found = []\n\n        for i in range(len(line)):\n\n            while self.find_next_state(current_state, line[i]) is None and current_state != 0:\n                current_state = self.AhoCorasickList[current_state]["suff_link"]\n            current_state = self.find_next_state(current_state, line[i])\n\n            if current_state is None:\n                current_state = 0\n            else:\n                for k in self.AhoCorasickList[current_state]["output"]:\n                    keywords_found.append((i - len(k) + 1, k))\n\n        return keywords_found\n\n\n@timeit\ndef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):\n    """Шаблон функции поиска"""\n\n    if not case_sensitivity:\n        string = string.lower()\n\n        if isinstance(sub_string, tuple):\n            sub_string = tuple([word.lower() for word in sub_string])\n        else:\n            sub_string = sub_string.lower()\n\n    if isinstance(sub_string, str):\n        sub_string_new = tuple([sub_string])\n        trie = AhoCorasickTree(sub_string_new)\n    else:\n        trie = AhoCorasickTree(sub_string)\n\n    result = trie.get_keywords_found(string)\n\n    if isinstance(sub_string, tuple):\n        counter = 0\n\n        if method == "last":\n            result = result[::-1]\n\n        information = dict()\n        for word in sub_string:\n            information[word] = []\n\n        for pair in result:\n            counter += 1\n            if counter <= count:\n                information[pair[1]].append(pair[0])\n\n        for key, item in information.items():\n            if item:\n                information[key] = tuple(item)\n            else:\n                information[key] = None\n    else:\n        information = []\n\n        for item in result:\n            information.append(item[0])\n\n        if method == "last":\n            information = list(information[::-1])[:count]\n        elif method == "first":\n            information = list(information[:count])\n\n        if information:\n            information = tuple(information)\n\n    if len(information) == 0:\n        information = None\n    elif isinstance(information, dict):\n        is_value = False\n        for _, value in information.items():\n            if value is not None:\n                is_value = True\n        if not is_value:\n            information = None\n\n    return information\n', 'a', False, 'first', 6247) '0.0025' sec
 2022-11-28 18:49:24,046 - DEBUG - 'search' ('from collections import deque\n\nimport time\n\nimport logging\nfrom typing import Union\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    filename=\'myProgramLog.txt\',\n    format=\' %(asctime)s - %(levelname)s - %(message)s\')\n\n\ndef timeit(method):\n    """Логирует время работы функции"""\n\n    def timed(*args):\n        ts = time.perf_counter()\n        result = method(*args)\n        te = time.perf_counter()\n        running_time = f"{te - ts:0.4f}"\n\n        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))\n        return result\n\n    return timed\n\n\nclass AhoCorasickTree(object):\n\n    def __init__(self, keywords: tuple) -> None:\n        """\n        Алгоритм Ахо-Корасика\n        :param keywords: дерево бора.\n        """\n\n        # Инициализируем корневой узел\n        self.AhoCorasickList = list()\n        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})\n\n        self.add_keywords(keywords)  # Добавляем все подстроки\n        self.set_suf_link()  # переходы\n\n    def add_keywords(self, keywords: tuple) -> None:\n        """ Добавляем все подстроки в список подстрок """\n        for keyword in keywords:\n            self.add_keyword(keyword)\n\n    def find_next_state(self, current_state, value) -> Union["node", None]:\n        """Находим следующее состояние"""\n        for node in self.AhoCorasickList[current_state]["next_states"]:\n            if self.AhoCorasickList[node]["value"] == value:\n                return node\n        return None\n\n    def add_keyword(self, keyword: str) -> None:\n        """Добавляем подстроки в дерево и помечаем терминальные точки"""\n        current_state = 0\n        index = 0\n        child = self.find_next_state(current_state, keyword[index])\n        while child is not None:\n            current_state = child\n            index = index + 1\n            if index < len(keyword):\n                child = self.find_next_state(current_state, keyword[index])\n            else:\n                break\n\n        for i in range(index, len(keyword)):\n            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}\n            self.AhoCorasickList.append(node)\n            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)\n            current_state = len(self.AhoCorasickList) - 1\n\n        self.AhoCorasickList[current_state]["output"].append(keyword)\n\n    def set_suf_link(self) -> None:\n        """Устанавливаем суффиксные ссылки"""\n        new_deque = deque()\n\n        for node in self.AhoCorasickList[0]["next_states"]:\n            new_deque.append(node)\n            self.AhoCorasickList[node]["suff_link"] = 0\n\n        while new_deque:\n            tmp = new_deque.popleft()\n\n            for child in self.AhoCorasickList[tmp]["next_states"]:\n                new_deque.append(child)\n                state = self.AhoCorasickList[tmp]["suff_link"]\n\n                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:\n                    state = self.AhoCorasickList[state]["suff_link"]\n\n                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,\n                                                                                self.AhoCorasickList[child]["value"])\n\n                if self.AhoCorasickList[child]["suff_link"] is None:\n                    self.AhoCorasickList[child]["suff_link"] = 0\n\n                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\\n                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][\n                                                            "output"]\n\n    def get_keywords_found(self, line):\n        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""\n\n        current_state = 0\n        keywords_found = []\n\n        for i in range(len(line)):\n\n            while self.find_next_state(current_state, line[i]) is None and current_state != 0:\n                current_state = self.AhoCorasickList[current_state]["suff_link"]\n            current_state = self.find_next_state(current_state, line[i])\n\n            if current_state is None:\n                current_state = 0\n            else:\n                for k in self.AhoCorasickList[current_state]["output"]:\n                    keywords_found.append((i - len(k) + 1, k))\n\n        return keywords_found\n\n\n@timeit\ndef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):\n    """Шаблон функции поиска"""\n\n    if not case_sensitivity:\n        string = string.lower()\n\n        if isinstance(sub_string, tuple):\n            sub_string = tuple([word.lower() for word in sub_string])\n        else:\n            sub_string = sub_string.lower()\n\n    if isinstance(sub_string, str):\n        sub_string_new = tuple([sub_string])\n        trie = AhoCorasickTree(sub_string_new)\n    else:\n        trie = AhoCorasickTree(sub_string)\n\n    result = trie.get_keywords_found(string)\n\n    if isinstance(sub_string, tuple):\n        counter = 0\n\n        if method == "last":\n            result = result[::-1]\n\n        information = dict()\n        for word in sub_string:\n            information[word] = []\n\n        for pair in result:\n            counter += 1\n            if counter <= count:\n                information[pair[1]].append(pair[0])\n\n        for key, item in information.items():\n            if item:\n                information[key] = tuple(item)\n            else:\n                information[key] = None\n    else:\n        information = []\n\n        for item in result:\n            information.append(item[0])\n\n        if method == "last":\n            information = list(information[::-1])[:count]\n        elif method == "first":\n            information = list(information[:count])\n\n        if information:\n            information = tuple(information)\n\n    if len(information) == 0:\n        information = None\n    elif isinstance(information, dict):\n        is_value = False\n        for _, value in information.items():\n            if value is not None:\n                is_value = True\n        if not is_value:\n            information = None\n\n    return information\n', 'a', False, 'first', 6247) '0.0024' sec
 2022-11-28 18:53:50,196 - DEBUG - 'search' (',,,,,hello   ,, da', (',', 'da', 'hello'), False, 'first', 1000) '0.0001' sec
 2022-11-28 18:54:32,355 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\ndef', False, 'first', 10000) '0.0001' sec
 2022-11-28 18:59:39,033 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\\\ndef', False, 'first', 51) '0.0001' sec
 2022-11-28 19:00:00,914 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\\\ndef', False, 'first', 49) '0.0001' sec
 2022-11-28 19:03:26,724 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\ndef', False, 'first', 2) '0.0001' sec
 2022-11-28 19:04:14,620 - DEBUG - 'search' ('import time\ndef main():\n    print("Hello,world!")', '\\ndef', False, 'first', 2) '0.3432' sec
 2022-11-28 19:11:24,193 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\\\ndef', False, 'first', 51) '0.0001' sec
 2022-11-28 19:11:27,685 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\\\ndef', False, 'first', 51) '0.0001' sec
 2022-11-28 19:11:28,946 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\\\ndef', False, 'first', 51) '0.0000' sec
 2022-11-28 19:11:32,591 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\ndef', False, 'first', 51) '0.0001' sec
 2022-11-28 19:11:50,968 - DEBUG - 'search' ('import time\\ndef main():\\n    print("Hello,world!")', '\\ndef', False, 'first', 51) '0.0000' sec
 2022-11-28 19:12:03,043 - DEBUG - 'search' ('from collections import deque\\n\\nimport time\\n\\nimport logging\\nfrom typing import Union\\n\\nlogging.basicConfig(\\n    level=logging.DEBUG,\\n    filename=\'myProgramLog.txt\',\\n    format=\' %(asctime)s - %(levelname)s - %(message)s\')\\n\\n\\ndef timeit(method):\\n    """Логирует время работы функции"""\\n\\n    def timed(*args):\\n        ts = time.perf_counter()\\n        result = method(*args)\\n        te = time.perf_counter()\\n        running_time = f"{te - ts:0.4f}"\\n\\n        logging.debug(\'%r %r %r sec\' % (method.__name__, args, running_time))\\n        return result\\n\\n    return timed\\n\\n\\nclass AhoCorasickTree(object):\\n\\n    def __init__(self, keywords: list) -> None:\\n        """\\n        Алгоритм Ахо-Корасика\\n        :param keywords: дерево бора.\\n        """\\n\\n        # Инициализируем корневой узел\\n        self.AhoCorasickList = list()\\n        self.AhoCorasickList.append({\'value\': \'\', \'next_states\': [], \'suff_link\': 0, \'output\': []})\\n\\n        self.add_keywords(keywords)  # Добавляем все подстроки\\n        self.set_suf_link()  # переходы\\n\\n    def add_keywords(self, keywords: list) -> None:\\n        """ Добавляем все подстроки в список подстрок """\\n        for keyword in keywords:\\n            self.add_keyword(keyword)\\n\\n    def find_next_state(self, current_state, value) -> Union["node", None]:\\n        """Находим следующее состояние"""\\n        for node in self.AhoCorasickList[current_state]["next_states"]:\\n            if self.AhoCorasickList[node]["value"] == value:\\n                return node\\n        return None\\n\\n    def add_keyword(self, keyword: str) -> None:\\n        """Добавляем подстроки в дерево и помечаем терминальные точки"""\\n        current_state = 0\\n        index = 0\\n        child = self.find_next_state(current_state, keyword[index])\\n        while child is not None:\\n            current_state = child\\n            index = index + 1\\n            if index < len(keyword):\\n                child = self.find_next_state(current_state, keyword[index])\\n            else:\\n                break\\n\\n        for i in range(index, len(keyword)):\\n            node = {\'value\': keyword[i], \'next_states\': [], \'suff_link\': 0, \'output\': []}\\n            self.AhoCorasickList.append(node)\\n            self.AhoCorasickList[current_state]["next_states"].append(len(self.AhoCorasickList) - 1)\\n            current_state = len(self.AhoCorasickList) - 1\\n\\n        self.AhoCorasickList[current_state]["output"].append(keyword)\\n\\n    def set_suf_link(self) -> None:\\n        """Устанавливаем суффиксные ссылки"""\\n        new_deque = deque()\\n\\n        for node in self.AhoCorasickList[0]["next_states"]:\\n            new_deque.append(node)\\n            self.AhoCorasickList[node]["suff_link"] = 0\\n\\n        while new_deque:\\n            tmp = new_deque.popleft()\\n\\n            for child in self.AhoCorasickList[tmp]["next_states"]:\\n                new_deque.append(child)\\n                state = self.AhoCorasickList[tmp]["suff_link"]\\n\\n                while self.find_next_state(state, self.AhoCorasickList[child]["value"]) is None and state != 0:\\n                    state = self.AhoCorasickList[state]["suff_link"]\\n\\n                self.AhoCorasickList[child]["suff_link"] = self.find_next_state(state,\\n                                                                                self.AhoCorasickList[child]["value"])\\n\\n                if self.AhoCorasickList[child]["suff_link"] is None:\\n                    self.AhoCorasickList[child]["suff_link"] = 0\\n\\n                self.AhoCorasickList[child]["output"] = self.AhoCorasickList[child]["output"] + \\\\n                                                        self.AhoCorasickList[self.AhoCorasickList[child]["suff_link"]][\\n                                                            "output"]\\n\\n    def get_keywords_found(self, line):\\n        """Возвращает индекс, где нашлась подстрока, в формате (индекс начала, значение подстроки)"""\\n\\n        current_state = 0\\n        keywords_found = []\\n\\n        for i in range(len(line)):\\n\\n            while self.find_next_state(current_state, line[i]) is None and current_state != 0:\\n                current_state = self.AhoCorasickList[current_state]["suff_link"]\\n            current_state = self.find_next_state(current_state, line[i])\\n\\n            if current_state is None:\\n                current_state = 0\\n            else:\\n                for k in self.AhoCorasickList[current_state]["output"]:\\n                    keywords_found.append((i - len(k) + 1, k))\\n\\n        return keywords_found\\n\\n\\n@timeit\\ndef search(string: str, sub_string: str or tuple, case_sensitivity: bool, method: str, count: int):\\n    """Шаблон функции поиска"""\\n\\n    if not case_sensitivity:\\n        string = string.lower()\\n\\n        if isinstance(sub_string, tuple):\\n            sub_string = tuple([word.lower() for word in sub_string])\\n        else:\\n            sub_string = sub_string.lower()\\n\\n    if isinstance(sub_string, str):\\n        sub_string_new = [sub_string]\\n        trie = AhoCorasickTree(sub_string_new)\\n    else:\\n        trie = AhoCorasickTree(list(sub_string))\\n\\n    result = trie.get_keywords_found(string)\\n\\n    if isinstance(sub_string, tuple):\\n        counter = 0\\n\\n        if method == "last":\\n            result = result[::-1]\\n\\n        information = dict()\\n        for word in sub_string:\\n            information[word] = []\\n\\n        for pair in result:\\n            counter += 1\\n            if counter <= count:\\n                information[pair[1]].append(pair[0])\\n\\n        for key, item in information.items():\\n            if item:\\n                information[key] = tuple(item)\\n            else:\\n                information[key] = None\\n    else:\\n        information = []\\n\\n        for item in result:\\n            information.append(item[0])\\n\\n        if method == "last":\\n            information = list(information[::-1])[:count]\\n        elif method == "first":\\n            information = list(information[:count])\\n\\n        if information:\\n            information = tuple(information)\\n\\n    if len(information) == 0:\\n        information = None\\n    elif isinstance(information, dict):\\n        is_value = False\\n        for _, value in information.items():\\n            if value is not None:\\n                is_value = True\\n        if not is_value:\\n            information = None\\n\\n    return information\\n', '\\n', False, 'last', 1) '0.0026' sec
 2022-11-28 19:12:16,888 - DEBUG - 'search' ('a', 'B', True, 'first', 100000) '0.0000' sec
 2022-11-28 19:12:23,242 - DEBUG - 'search' ('ababbaaba', 'a', False, 'first', 9) '0.0000' sec
 2022-11-28 19:12:49,467 - DEBUG - 'search' ('aaaaaa aaaa ba', 'aaa', False, 'first', 14) '0.0000' sec
 2022-11-28 19:13:16,862 - DEBUG - 'search' ('aaaaaa aaaa ba', ('aaa', 'ba'), False, 'first', 14) '0.0000' sec
